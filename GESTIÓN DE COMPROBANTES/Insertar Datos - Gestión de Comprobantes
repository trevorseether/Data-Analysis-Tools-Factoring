{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPpL001Gm7jT5j1ENQP4cQ5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jmstm0OW3eWb","executionInfo":{"status":"ok","timestamp":1761925026119,"user_tz":300,"elapsed":25361,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}},"outputId":"4d890057-f618-40f9-9c39-19f744d05796"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pyathena in /usr/local/lib/python3.12/dist-packages (3.19.0)\n","Requirement already satisfied: boto3>=1.26.4 in /usr/local/lib/python3.12/dist-packages (from pyathena) (1.40.63)\n","Requirement already satisfied: botocore>=1.29.4 in /usr/local/lib/python3.12/dist-packages (from pyathena) (1.40.63)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.12/dist-packages (from pyathena) (2025.3.0)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.12/dist-packages (from pyathena) (2.9.0.post0)\n","Requirement already satisfied: tenacity>=4.1.0 in /usr/local/lib/python3.12/dist-packages (from pyathena) (8.5.0)\n","Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.12/dist-packages (from boto3>=1.26.4->pyathena) (1.0.1)\n","Requirement already satisfied: s3transfer<0.15.0,>=0.14.0 in /usr/local/lib/python3.12/dist-packages (from boto3>=1.26.4->pyathena) (0.14.0)\n","Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.12/dist-packages (from botocore>=1.29.4->pyathena) (2.5.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil->pyathena) (1.17.0)\n","Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["# pip install boto3 pyathena\n","\n","import pandas as pd\n","# import numpy as np\n","# import boto3\n","!pip install pyathena\n","from pyathena import connect\n","# import openpyxl\n","from openpyxl import load_workbook\n","from openpyxl.styles import NamedStyle\n","import os\n","\n","import shutil\n","from datetime import datetime\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","from google.colab import auth\n","auth.authenticate_user()\n","import gspread\n","from google.auth import default\n","creds, _ = default()\n","\n","gc = gspread.authorize(creds)\n","import warnings\n","warnings.filterwarnings(\"ignore\")"]},{"cell_type":"code","source":["# Actualizar este enlace siempre\n","enlace_actual_garantias = \"https://docs.google.com/spreadsheets/d/1vo1iLGRh1OIZEBTVU2NmMGpEadhZKm2EAvqjdHhDXF8/edit?gid=1628053401#gid=1628053401\""],"metadata":{"id":"M69alm3o57xX","executionInfo":{"status":"ok","timestamp":1761925452798,"user_tz":300,"elapsed":4,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["#%% Credenciales de AmazonAthena\n","import json\n","with open(r\"/content/credenciales actualizado.txt\") as f:\n","    creds = json.load(f)\n","\n","conn = connect(\n","    aws_access_key_id     = creds[\"AccessKeyId\"],\n","    aws_secret_access_key = creds[\"SecretAccessKey\"],\n","    aws_session_token     = creds[\"SessionToken\"],\n","    s3_staging_dir        = creds[\"s3_staging_dir\"],\n","    region_name           = creds[\"region_name\"]\n","\n","    )\n"],"metadata":{"id":"Zvx6dXTM4-hP","executionInfo":{"status":"ok","timestamp":1761924671288,"user_tz":300,"elapsed":302,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["#%% lectura de archivo de garantías negativas:\n","# garantias = pd.read_excel(r'C:/Users/Joseph Montoya/Downloads/28.10.25 - CUADRE DE CAJA.xlsx',\n","#                           sheet_name = 'Desembolso de Garantías')\n","\n","# Abre el documento por su URL\n","sheet_url = enlace_actual_garantias\n","spreadsheet = gc.open_by_url(sheet_url)\n","#Verificamos nombre de las hojas\n","worksheet_list = spreadsheet.worksheets()\n","# for i, ws in enumerate(worksheet_list):\n","#     print(f\"Hoja {i+1}: {ws.title}\")\n","\n","# Seleccionar la hoja por nombre directamente\n","worksheet = spreadsheet.worksheet(\"Desembolso de Garantías\")\n","\n","# Convertimos a df\n","from gspread_dataframe import get_as_dataframe\n","garantias = get_as_dataframe(worksheet, evaluate_formulas=True)\n","garantias = garantias.dropna(how='all')\n","\n","garantias = garantias[ ~pd.isna(garantias ['CODIGO SUBASTA']) ]\n","garantias = garantias[ ~pd.isna(garantias ['GARANTIA']) ]\n","garantias['GARANTIA'] = garantias['GARANTIA'].astype(str)\n","garantias = garantias[ garantias['GARANTIA'] != \"#VALUE!\" ]\n","garantias = garantias[['CODIGO SUBASTA', 'GARANTIA']]\n","\n","\n","garantias['GARANTIA'] = garantias['GARANTIA'].str.replace(\",\", \".\")\n","garantias = garantias.loc[garantias['GARANTIA'].astype(str).str.strip() != '.']\n","\n","garantias['GARANTIA'] = pd.to_numeric(garantias['GARANTIA'], errors = 'coerce')\n","garantias = garantias[ garantias['GARANTIA'] < 0 ]"],"metadata":{"id":"CaF8aIpe6qir","executionInfo":{"status":"ok","timestamp":1761925842446,"user_tz":300,"elapsed":2443,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# Ejecutar consulta (fac_ingresos_teoricos_contabilidad_vesquivel)\n","\n","query = \"\"\"\n","\n","with Pagos as (\n","\tselect b.code as Subasta,\n","\t\t--Codigo subasta\n","\t\tmax(c.date) as Fecha_Pago,\n","\t\t--Fecha de Pago máximo, se debe restar 5 horas\n","\t\tsum(c.amount) as Monto_Pagado,\n","\t\t--Monto Pagado por el cliente\n","\t\tsum(c.distribution_provider_amount_payment_client) AS monto_pagado_total\n","\tfrom prod_datalake_analytics.fac_client_payments a\n","\t\tleft join prod_datalake_analytics.fac_auctions b on a.auction_id = b._id\n","\t\tleft join prod_datalake_analytics.fac_client_payment_payments c on a._id = c.client_payment_id\n","\twhere a.status = 'finalizado'\n","\tgroup by b.code\n","),\n","Pagos_crowd as (\n","\tselect auction_code as Subasta,\n","\t\tROUND(sum(interes_payment), 2) as Monto_pagado_crowd\n","\tfrom prod_datalake_analytics.fac_client_payment_investors\n","\twhere bid_created_at >= TIMESTAMP '2024-11-01 00:00:00.000'\n","\tgroup by auction_code\n","),\n","payments1 as (\n","\tSELECT *,\n","\t\tb.code as codigo,\n","\t\t(\n","\t\t\tCASE\n","\t\t\t\tWHEN (\n","\t\t\t\t\tCOALESCE(fcpp.distribution_provider_amount_bussinesman, 0) > 0\n","\t\t\t\t) THEN fcpp.distribution_provider_amount_bussinesman\n","\t\t\t\tWHEN (\n","\t\t\t\t\t(\n","\t\t\t\t\t\tCOALESCE(fcpp.pay_order_businessman_amount, 0) > 0\n","\t\t\t\t\t)\n","\t\t\t\t\tAND (COALESCE(fcpp.distribution_provider_igv, 0) > 0)\n","\t\t\t\t) THEN 0\n","\t\t\t\tWHEN (\n","\t\t\t\t\t(\n","\t\t\t\t\t\tCOALESCE(fcpp.pay_order_businessman_amount, 0) > 0\n","\t\t\t\t\t)\n","\t\t\t\t\tAND (COALESCE(fcpp.distribution_provider_igv, 0) = 0)\n","\t\t\t\t) THEN pay_order_businessman_amount ELSE 0\n","\t\t\tEND\n","\t\t) guarantee_paid\n","\tFROM \"prod_datalake_analytics\".\"fac_client_payment_payments\" as fcpp\n","\t\tleft join prod_datalake_analytics.fac_client_payments as c on fcpp.client_payment_id = c._id\n","\t\tleft join prod_datalake_analytics.fac_requests as b on c.request_id = b._id\n","\twhere b.status = 'closed'\n","\t\tand c.status = 'finalizado' --order by b.code\n","),\n","int_pagado as(\n","\tselect a.codigo,\n","\t\tround(\n","\t\t\tsum(\n","\t\t\t\t(\n","\t\t\t\t\tCASE\n","\t\t\t\t\t\tWHEN (\n","\t\t\t\t\t\t\t(COALESCE(pay_order_businessman_amount, 0) > 0)\n","\t\t\t\t\t\t\tAND (COALESCE(distribution_provider_igv, 0) > 0)\n","\t\t\t\t\t\t) THEN (\n","\t\t\t\t\t\t\tCOALESCE(a.distribution_provider_INTeres_payment, 0) + COALESCE(distribution_provider_igv, 0)\n","\t\t\t\t\t\t)\n","\t\t\t\t\t\tWHEN (\n","\t\t\t\t\t\t\t(COALESCE(pay_order_businessman_amount, 0) = 0)\n","\t\t\t\t\t\t\tAND (COALESCE(distribution_provider_igv, 0) > 0)\n","\t\t\t\t\t\t) THEN (\n","\t\t\t\t\t\t\tCOALESCE(a.distribution_provider_INTeres_payment, 0) + COALESCE(distribution_provider_igv, 0)\n","\t\t\t\t\t\t)\n","\t\t\t\t\t\tWHEN (\n","\t\t\t\t\t\t\t(\n","\t\t\t\t\t\t\t\tCOALESCE(a.distribution_provider_INTeres_payment, 0) = 0\n","\t\t\t\t\t\t\t)\n","\t\t\t\t\t\t\tAND (\n","\t\t\t\t\t\t\t\tCOALESCE(\n","\t\t\t\t\t\t\t\t\ta.distribution_provider_amount_capital_payment,\n","\t\t\t\t\t\t\t\t\t0\n","\t\t\t\t\t\t\t\t) = 0\n","\t\t\t\t\t\t\t)\n","\t\t\t\t\t\t\tAND COALESCE((guarantee_paid = 0))\n","\t\t\t\t\t\t) THEN a.distribution_provider_INTeres ELSE COALESCE(a.distribution_provider_INTeres_payment, 0)\n","\t\t\t\t\tEND\n","\t\t\t\t)\n","\t\t\t),\n","\t\t\t2\n","\t\t) interest_paid,\n","\n","\t\tsum( coalesce (diff_interest_proforma_interes_total_real,0))  as int_pronto_pago\n","\n","\tfrom payments1 as a\n","\tgroup by a.codigo\n","),\n","estado_cob as (\n","\tselect fr.code,\n","\t\tcount(fr.code) as conteo_inversionistas,\n","\t\tcount(aux.cobrados) as conteo_cobrados,\n","\t\tcase\n","\t\t\twhen count(fr.code) = count(aux.cobrados) then 'Cerrado' else ''\n","\t\tend as \"Estado de cobranza admin\"\n","\tfrom prod_datalake_analytics.fac_bids as fb\n","\t\tleft join prod_datalake_analytics.fac_requests as fr on fr._id = fb.request_id\n","\t\tleft join (\n","\t\t\tselect fr.code,\n","\t\t\t\tcount(fb.pay_status) as cobrados\n","\t\t\tfrom prod_datalake_analytics.fac_bids as fb\n","\t\t\t\tleft join prod_datalake_analytics.fac_requests as fr on fr._id = fb.request_id\n","\t\t\twhere fb.status = 'ganado'\n","\t\t\t\tand fb.pay_status = 'cobrado'\n","\t\t\tgroup by fr.code\n","\t\t) as aux on aux.code = fr.code\n","\twhere fb.status = 'ganado'\n","\tgroup by fr.code\n",")\n","select case\n","\t\twhen proforma_strategy_name = 'factoring-v1-new' then 'Estrategias' else ''\n","\tend as Flag_Estrategias,\n","\ta.code as Subasta,\n","\t--subasta\n","\ta.status as Status,\n","\tproforma_simulation_currency as Moneda,\n","\t--moneda\n","\tDATE(interest_proforma_disbursement_date) as Fecha_desembolso,\n","\t--fecha desembolso registrado admin\n","\tDATE(\n","\t\tdate_add('hour', -5, CAST(a.closed_at AS timestamp))\n","\t) as Fecha_venta,\n","\t--fecha de venta\n","\tDATE(proforma_client_payment_date_expected) as Fecha_esperada_pago,\n","\t--Fecha de pago proveedor\n","\tproforma_simulation_financing_total as Monto_Financiado,\n","\t--Monto Financiado\n","\tproforma_simulation_net as Monto_neto,\n","\t--Monto Neto Factura\n","\tproforma_financing_interest_rate as Tasa_interes_empresario,\n","\t--tasa de interés\n","\tproforma_profit_interest_rate as Tasa_interes_crowd,\n","\t--tasa de interés crowd\n","\tinterest_proforma_simulation_financing_cost_value as Costo_Financiamiento,\n","\t--proforma_simulation_financing_commission as comision_sin_igv, --Comision sin IGV\n","\t--proforma_simulation_financing_commission_igv as igv_comision, --IGV comisión\n","\t--proforma_simulation_financing_commission + proforma_simulation_financing_commission_igv as comision_total, --comisión con IGV\n","\ta.company_ruc as Ruc_proveedor,\n","\ta.company_name as Razon_Social,\n","\tg.address as Direccion,\n","\ta.businessman_email as Correo,\n","\tb.code as Comprobante_Comision,\n","\tc.code as Comprobante_interes,\n","\tDATE(d.Fecha_desembolso) as Fecha_Desembolso_Hubspot,\n","\tDATE(e.Fecha_Pago) as Fecha_Pago_real,\n","\t--e.Monto_Pagado as Monto_pagado\n","\te.monto_pagado_total as \"Monto pagado total\",\n","\tf.Monto_pagado_crowd as Monto_pagado_crowd,\n","\tec.\"Estado de cobranza admin\",\n","\tip.interest_paid as \"Costo de Financiamiento cobrado admin\",\n","\tip.int_pronto_pago,\n","\t'grupo 1' as origen_query\n","from prod_datalake_analytics.fac_requests a\n","\tleft join (\n","\t\tselect *\n","\t\tfrom prod_datalake_analytics.view_prestamype_fac_cpe\n","\t\twhere concept = 'commission-factoring'\n","\t) b on a._id = b.request_id\n","\tleft join (\n","\t\t(\n","\t\t\tselect vpcp.*\n","\t\t\tfrom prod_datalake_analytics.view_prestamype_fac_cpe as vpcp\n","\t\t\t\tinner join (\n","\t\t\t\t\tselect request_id,\n","\t\t\t\t\t\tmin(created_at) as created_at\n","\t\t\t\t\tfrom prod_datalake_analytics.view_prestamype_fac_cpe\n","\t\t\t\t\twhere concept = 'interest-factoring'\n","\t\t\t\t\tgroup by request_id\n","\t\t\t\t) as vpcpmax on vpcp.request_id = vpcpmax.request_id\n","\t\t\t\tand vpcp.created_at = vpcpmax.created_at\n","\t\t\twhere vpcp.concept = 'interest-factoring'\n","\t\t)\n","\t) c on a._id = c.request_id\n","\tleft join (\n","\t\tselect c_digo_de_subasta,\n","\t\t\tmin(fecha_de_desembolso_registrado) as Fecha_desembolso\n","\t\tfrom prod_datalake_master.hubspot__pagos_facturas\n","\t\twhere hs_pipeline = '42653778'\n","\n","\t\tgroup by c_digo_de_subasta\n","\t) d on a.code = d.c_digo_de_subasta\n","\tleft join Pagos as e on a.code = e.Subasta\n","\tleft join Pagos_crowd as f on a.code = f.Subasta\n","\tleft join prod_datalake_analytics.view_fac_companies as g on a.company_ruc = g.ruc\n","\tleft join int_pagado as ip on ip.codigo = a.code\n","\tleft join estado_cob as ec on ec.code = e.Subasta\n","where product = 'factoring'\n","\tand a.status in('closed', 'ongoing')\n","\tand interest_proforma_disbursement_date is null --and DATE(e.Fecha_Pago) is not null\n","\tand proforma_strategy_name = 'factoring-v1-new'\n","union all\n","select case\n","\t\twhen proforma_strategy_name = 'factoring-v1-new' then 'Estrategias' else ''\n","\tend as Flag_Estrategias,\n","\ta.code as Subasta,\n","\t--subasta\n","\ta.status as Status,\n","\tcurrency as Moneda,\n","\t--moneda\n","\tDATE(interest_proforma_disbursement_date) as Fecha_desembolso,\n","\t--fecha desembolso registrado admin\n","\tDATE(\n","\t\tdate_add('hour', -5, CAST(a.closed_at AS timestamp))\n","\t) as Fecha_venta,\n","\t--fecha de venta\n","\tDATE(interest_proforma_client_payment_date_expected) as Fecha_esperada_pago,\n","\t--Fecha de pago proveedor\n","\tinterest_proforma_simulation_financing_total as Monto_Financiado,\n","\t--Monto Financiado\n","\tinterest_proforma_simulation_net as Monto_neto,\n","\t--Monto Neto Factura\n","\tinterest_proforma_financing_interest_rate as Tasa_interes_empresario,\n","\t--tasa de interés\n","\tproforma_profit_interest_rate as Tasa_interes_crowd,\n","\t--tasa de interés crowd\n","\tinterest_proforma_simulation_financing_cost_value as Costo_Financiamiento,\n","\t--interest_proforma_simulation_financing_commission as comision_sin_igv, --Comision sin IGV\n","\t--interest_proforma_simulation_financing_commission_igv as igv_comision, --IGV comisión\n","\t--interest_proforma_simulation_financing_commission + interest_proforma_simulation_financing_commission_igv as comision_total, --comisión con IGV\n","\ta.company_ruc as Ruc_proveedor,\n","\ta.company_name as Razon_Social,\n","\tg.address as Direccion,\n","\ta.businessman_email as Correo,\n","\tb.code as Comprobante_Comision,\n","\tc.code as Comprobante_interes,\n","\tDATE(d.Fecha_desembolso) as Fecha_Desembolso_Hubspot,\n","\tDATE(e.Fecha_Pago) as Fecha_Pago_real,\n","\te.monto_pagado_total as \"Monto pagado total\",\n","\tf.Monto_pagado_crowd as Monto_pagado_crowd,\n","\tec.\"Estado de cobranza admin\",\n","\tip.interest_paid as \"Costo de Financiamiento cobrado admin\",\n","\tip.int_pronto_pago,\n","\t--e.Monto_Pagado as Monto_pagado\n","\t'grupo 2' as origen_query\n","from prod_datalake_analytics.fac_requests a\n","\tleft join (\n","\t\tselect *\n","\t\tfrom prod_datalake_analytics.view_prestamype_fac_cpe\n","\t\twhere concept = 'commission-factoring'\n","\t) b on a._id = b.request_id\n","\tleft join (\n","\t\t(\n","\t\t\tselect vpcp.*\n","\t\t\tfrom prod_datalake_analytics.view_prestamype_fac_cpe as vpcp\n","\t\t\t\tinner join (\n","\t\t\t\t\tselect request_id,\n","\t\t\t\t\t\tmin(created_at) as created_at\n","\t\t\t\t\tfrom prod_datalake_analytics.view_prestamype_fac_cpe\n","\t\t\t\t\twhere concept = 'interest-factoring'\n","\t\t\t\t\tgroup by request_id\n","\t\t\t\t) as vpcpmax on vpcp.request_id = vpcpmax.request_id\n","\t\t\t\tand vpcp.created_at = vpcpmax.created_at\n","\t\t\twhere vpcp.concept = 'interest-factoring'\n","\t\t)\n","\t) c on a._id = c.request_id\n","\tleft join (\n","\t\tselect c_digo_de_subasta,\n","\t\t\tmin(fecha_de_desembolso_registrado) as Fecha_desembolso\n","\t\tfrom prod_datalake_master.hubspot__pagos_facturas\n","\t\twhere hs_pipeline = '42653778'\n","\t\tgroup by c_digo_de_subasta\n","\t) d on a.code = d.c_digo_de_subasta\n","\tleft join Pagos as e on a.code = e.Subasta\n","\tleft join Pagos_crowd as f on a.code = f.Subasta\n","\tleft join prod_datalake_analytics.view_fac_companies as g on a.company_ruc = g.ruc\n","\tleft join int_pagado as ip on ip.codigo = a.code\n","\tleft join estado_cob as ec on ec.code = e.Subasta\n","where product = 'factoring'\n","\tand a.status in('closed', 'ongoing')\n","\tand interest_proforma_disbursement_date is not null --and DATE(e.Fecha_Pago) is not null\n","\tand proforma_strategy_name = 'factoring-v1-new'\n","\n","\n","\n","\"\"\"\n","\n","cursor = conn.cursor()\n","cursor.execute(query)\n","\n","# Obtener los resultados\n","resultados = cursor.fetchall()\n","\n","# Obtener los nombres de las columnas\n","column_names = [desc[0] for desc in cursor.description]\n","\n","# Convertir los resultados a un DataFrame de pandas\n","df = pd.DataFrame(resultados, columns=column_names)\n","\n","del df['origen_query']\n","\n","print('datos obtenidos de Query principal')\n","\n","duplicados = df[df[\"Subasta\"].duplicated()]\n","if duplicados.shape[0] > 0 :\n","    print('alerta de duplicados')\n","\n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xLsKeVVE5Q5T","executionInfo":{"status":"ok","timestamp":1761925945174,"user_tz":300,"elapsed":17021,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}},"outputId":"cfa8a2a5-7c5d-408b-9e88-bb7ca5178e41"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["datos obtenidos de Query principal\n"]}]},{"cell_type":"code","source":["#Cambiar todas las columnas de fecha a formato fecha:\n","for col in df.filter(like=\"Fecha\").columns:\n","    df[col] = pd.to_datetime(df[col], errors='coerce')\n","\n","#Ordernar por Fecha de Venta\n","df = df.sort_values(by='Fecha_venta', ascending = True).reset_index(drop = True)\n","\n","#Cambiar todas las columnas en texto a formato numérico:\n","columnas_a_convertir =['Monto_Financiado',\n","                       'Monto_neto',\n","                       'Tasa_interes_empresario',\n","                       'Tasa_interes_crowd',\n","                       'Costo_Financiamiento']\n","\n","df[columnas_a_convertir] = df[columnas_a_convertir].apply(pd.to_numeric)"],"metadata":{"id":"i0Z18br6-D-B","executionInfo":{"status":"ok","timestamp":1761926006158,"user_tz":300,"elapsed":135,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["UBI       = r'/content/drive/MyDrive'\n","DOCUMENTO = 'Pagados 122024 en adelante.xlsx' #'Pagados arreglado.xlsx'\n","compartido=pd.read_excel(UBI + '/' + DOCUMENTO,\n","                         sheet_name ='Online')\n","\n","nuevos_registros = df[~df['Subasta'].isin(compartido['Subasta'])]"],"metadata":{"id":"ZbV9nEF--XRc","executionInfo":{"status":"ok","timestamp":1761926089724,"user_tz":300,"elapsed":18814,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["#%% creación de copia de seguridad\n","hoy_formateado = datetime.today().strftime('%d-%m-%Y')  # o '%Y-%m-%d', etc.\n","\n","# Ruta base del nuevo archivo\n","nombre_base = f'Pagados {hoy_formateado}.xlsx'\n","ruta_base = os.path.join(UBI, 'backups PAGADOS')\n","destination_path = os.path.join(ruta_base, nombre_base)\n","\n","# Verificar si el archivo ya existe y generar uno con (1), (2), etc.\n","contador = 1\n","while os.path.exists(destination_path):\n","    nombre_con_sufijo = f'Pagados {hoy_formateado} ({contador}).xlsx'\n","    destination_path = os.path.join(ruta_base, nombre_con_sufijo)\n","    contador += 1\n","\n","# Copiar el archivo\n","source_path = os.path.join(UBI, DOCUMENTO)\n","shutil.copy(source_path, destination_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"BZRLV5SW-uB4","executionInfo":{"status":"ok","timestamp":1761926128442,"user_tz":300,"elapsed":54,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}},"outputId":"ebea7b1d-ba39-4bbf-8fd6-d56d9cc84966"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/MyDrive/backups PAGADOS/Pagados 31-10-2025.xlsx'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["#%%\n","compartido['Subasta'] = compartido['Subasta'].str.strip()\n","df['Subasta'] = df['Subasta'].str.strip()\n","\n","df_para_merge = df.copy()\n","del df_para_merge['Flag_Estrategias']\n","\n","base_actual  = compartido[['Flag_Estrategias', 'Subasta']].merge(df_para_merge,\n","                                                                 on  = 'Subasta',\n","                                                                 how = 'left')\n","del base_actual['Flag_Estrategias']"],"metadata":{"id":"6a_I6_JF_c_h","executionInfo":{"status":"ok","timestamp":1761926305205,"user_tz":300,"elapsed":29,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["#%% VALIDACIÓN DE DUPLICADOS\n","base_actual = base_actual[~((base_actual['Subasta'] == 'KZaM2xli') & (base_actual['Comprobante_interes'] == 'F002-26532'))]\n","\n","dupli = base_actual[base_actual.duplicated(subset=['Subasta'])]\n","if dupli.shape[0] > 0:\n","    print('alerta de duplicados, urgente validar')\n","    print(dupli)"],"metadata":{"id":"k31lCVOS_exO","executionInfo":{"status":"ok","timestamp":1761926312067,"user_tz":300,"elapsed":30,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["#%% incluir columnas que deben ser obtenidas del archivo original\n","base_actual = base_actual.merge(compartido[['Subasta',\n","                                            'Estado de cobranza real']],\n","                                on  = 'Subasta',\n","                                how ='left')\n","\n","copia_base = base_actual.copy()"],"metadata":{"id":"rEzAnLZ1_gVY","executionInfo":{"status":"ok","timestamp":1761926318941,"user_tz":300,"elapsed":73,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["#%%\n","# elimina la primera columna del dataframe\n","# base_actual  = base_actual.iloc[:, range(1, base_actual.shape[1])]\n","\n","base_actual  = base_actual[['Status',\n","                            'Moneda',\n","                            'Fecha_desembolso',\n","                            'Fecha_venta',\n","                            'Fecha_esperada_pago',\n","                            'Monto_Financiado',\n","                            'Monto_neto',\n","                            'Tasa_interes_empresario',\n","                            'Tasa_interes_crowd',\n","                            'Costo_Financiamiento',\n","                            'Ruc_proveedor',\n","                            'Razon_Social',\n","                            'Direccion',\n","                            'Correo',\n","                            'Comprobante_Comision',\n","                            'Comprobante_interes',\n","                            'Fecha_Desembolso_Hubspot',\n","                            'Fecha_Pago_real',\n","                            'Monto pagado total', # nuevo\n","                            'Estado de cobranza real', # nuevo, llenado por tesorería\n","                            'Estado de cobranza admin', # nuevo, implementado\n","                            'Monto_pagado_crowd', # Interés Bruto pagado a Crowd (Victor E)\n","                            'Costo de Financiamiento cobrado admin'\n","                            ]]"],"metadata":{"id":"knKZtcte_isf","executionInfo":{"status":"ok","timestamp":1761926328452,"user_tz":300,"elapsed":16,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["#%%\n","#Abrimos el excel donde contiene el reporte:\n","if duplicados.shape[0] == 0:\n","\n","    excel           = UBI + '/' + DOCUMENTO\n","    workbook        = load_workbook(excel)\n","    BD_Contabilidad = workbook['Online']"],"metadata":{"id":"k7qcJIVP_lJr","executionInfo":{"status":"ok","timestamp":1761926368198,"user_tz":300,"elapsed":27555,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["#%%\n","if duplicados.shape[0] == 0:\n","\n","    for row in BD_Contabilidad.iter_rows(min_row = 2,\n","                                         max_row = base_actual.shape[0]+1,\n","                                         min_col = 3,\n","                                         max_col = 20):  # C=3, U=20\n","        for cell in row:\n","            cell.value = None  # Borra el contenido pero mantiene el formato\n","\n","    # Escribir el DataFrame en el Excel desde la columna C\n","    for i, row in enumerate(base_actual.itertuples(index = False), start = 2):  # Comenzar desde la fila 2\n","        for j, value in enumerate(row, start = 3):  # Escribir desde la columna C (col=3)\n","            BD_Contabilidad.cell(row=i, column=j, value=value)"],"metadata":{"id":"l_WiJ7vl_ydg","executionInfo":{"status":"ok","timestamp":1761926394744,"user_tz":300,"elapsed":1516,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["#%% Función para eliminar un estilo si ya existe\n","def eliminar_estilo_si_existe(workbook, nombre_estilo):\n","    for estilo in workbook.named_styles:\n","        if isinstance(estilo, NamedStyle) and estilo.name == nombre_estilo:\n","            workbook.named_styles.remove(estilo)\n","            print(f\"Estilo {nombre_estilo} eliminado.\")\n","            break  # Salir después de eliminar el estilo\n","\n","# Eliminar los estilos si existen\n","# eliminar_estilo_si_existe(workbook, 'date_style')\n","# eliminar_estilo_si_existe(workbook, 'percentage_style')\n"],"metadata":{"id":"z8BIekw1_0nO","executionInfo":{"status":"ok","timestamp":1761926401695,"user_tz":300,"elapsed":2,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["#%% Añadir nuevos registros al final\n","# ultima_fila = BD_Contabilidad.max_row\n","if duplicados.shape[0] == 0:\n","\n","    ultima_fila = base_actual.shape[0]+1\n","\n","    for i, row in nuevos_registros.iterrows():\n","        for col_num, value in enumerate(row, start=1):\n","            BD_Contabilidad.cell(row=ultima_fila + 1, column=col_num, value=value)\n","        ultima_fila += 1  # mover la fila después de escribir"],"metadata":{"id":"nUMysxHr_1vN","executionInfo":{"status":"ok","timestamp":1761926406184,"user_tz":300,"elapsed":15,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["#%% Crear y agregar nuevos estilos\n","# Crear el estilo de fecha si no existe\n","# date_style = NamedStyle(name=\"date_style\", number_format='DD/MM/YYYY')\n","# percentage_style = NamedStyle(name=\"percentage_style\", number_format='0.00%')\n","\n","# # Aplicar el estilo de fecha a las columnas correspondientes\n","# columnas_fecha = ['E', 'F', 'G', 'S', 'T']\n","# for columna in columnas_fecha:\n","#     for row in BD_Contabilidad[columna]:\n","#         row.style = date_style\n","\n","# # Aplicar el estilo de porcentaje a las columnas correspondientes\n","# columna_porcentaje = ['J', 'K']\n","# for columna in columna_porcentaje:\n","#     for row in BD_Contabilidad[columna]:\n","#         row.style = percentage_style\n","\n","# # Añadir los estilos al libro\n","# if 'date_style' not in [estilo.name for estilo in workbook.named_styles]:\n","#     workbook.add_named_style(date_style)\n","\n","# if 'percentage_style' not in [estilo.name for estilo in workbook.named_styles]:\n","#     workbook.add_named_style(percentage_style)\n","\n","# Guardar los cambios\n","if duplicados.shape[0] == 0:\n","\n","    workbook.save(excel)\n","\n","print('datos insertados en Gestión de Comprobantes')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ClvrFjLg_3be","executionInfo":{"status":"ok","timestamp":1761926430995,"user_tz":300,"elapsed":17598,"user":{"displayName":"Joseph Montoya","userId":"07745622955384668359"}},"outputId":"aa22e4ad-3d5d-4d13-9c6e-cea747a69058"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["datos insertados en Gestión de Comprobantes\n"]}]},{"cell_type":"code","source":["#%% columna auxiliar de garantía\n","\"\"\"\n","copia_base['Subasta'] = copia_base['Subasta'].str.lower()\n","garantias['CODIGO SUBASTA'] = garantias['CODIGO SUBASTA'].str.lower()\n","copia_base = copia_base.merge(garantias,\n","                              left_on  = 'Subasta',\n","                              right_on = 'CODIGO SUBASTA',\n","                              how      = 'left')\n","\n","copia_base.rename(columns = {'GARANTIA': 'GARANTIA NEGATIVA'}, inplace=True)\n","\n","copia_base.rename(columns = {'int_pronto_pago': 'PRONTO PAGO ADMIN (julio 2025 en adelante)'}, inplace = True)\n","\n","copia_base[['Subasta',\n","            'GARANTIA NEGATIVA',\n","            'PRONTO PAGO ADMIN (julio 2025 en adelante)']].to_excel(R'C:\\Users\\Joseph Montoya\\Desktop\\columna garantía y pronto pago.xlsx',\n","                                           index = False )\n","\n","print('creadas garantías negativas, y ops pronto pago')\n","\n","\"\"\""],"metadata":{"id":"nhhrHsGW_9B9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **PARTE 2, INSERTAR EN OPPS OFFLINE**"],"metadata":{"id":"YCBgMPrUAGwq"}},{"cell_type":"code","source":[],"metadata":{"id":"lS0nQM5yAGQS"},"execution_count":null,"outputs":[]}]}